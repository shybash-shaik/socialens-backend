// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  super_admin
  site_admin
  operator
  client_admin
  client_user
}

enum UserStatus {
  active
  invited
  disabled
}

enum AuthType {
  totp
  otp
}

model User {
  id            String     @id @default(uuid()) @db.Char(36)
  email         String     @unique @db.VarChar(191)
  passwordHash  String     @map("password_hash") @db.VarChar(255)
  passwordAlgo  String     @map("password_algo") @db.VarChar(32)
  firstName     String?    @map("first_name") @db.VarChar(100)
  lastName      String?    @map("last_name") @db.VarChar(100)
  role          Role
  tenantId      String?    @map("tenant_id") @db.VarChar(64)
  totpSecret    String?    @map("totp_secret") @db.VarChar(191)
  totpEnabled   Boolean    @default(false) @map("totp_enabled")
  emailVerified Boolean    @default(false) @map("email_verified")
  invitedBy     String?    @map("invited_by") @db.Char(36)
  status        UserStatus @default(invited)
  lastLogin     DateTime?  @map("last_login") @db.DateTime(3)
  createdAt     DateTime   @default(now()) @map("created_at") @db.DateTime(3)
  updatedAt     DateTime   @updatedAt @map("updated_at") @db.DateTime(3)

  refreshTokens RefreshToken[]
}

model Invitation {
  id                    String    @id @default(uuid()) @db.Char(36)
  email                 String    @db.VarChar(191)
  token                 String    @unique @db.Char(36)
  role                  Role
  tenantId              String?   @map("tenant_id") @db.VarChar(64)
  invitedBy             String    @map("invited_by") @db.Char(36)
  temporaryPasswordHash String?   @map("temporary_password_hash") @db.VarChar(255)
  authType              AuthType  @map("auth_type")
  expiresAt             DateTime  @map("expires_at") @db.DateTime(3)
  acceptedAt            DateTime? @map("accepted_at") @db.DateTime(3)
  status                String    @default("pending")
  createdAt             DateTime  @default(now()) @map("created_at") @db.DateTime(3)
  updatedAt             DateTime  @updatedAt @map("updated_at") @db.DateTime(3)
}

model RefreshToken {
  id        String    @id @default(uuid()) @db.Char(36)
  userId    String    @map("user_id") @db.Char(36)
  tokenHash String    @map("token_hash") @db.VarChar(255)
  userAgent String?   @map("user_agent") @db.VarChar(255)
  ip        String?   @db.VarChar(64)
  expiresAt DateTime  @map("expires_at") @db.DateTime(3)
  revokedAt DateTime? @map("revoked_at") @db.DateTime(3)
  createdAt DateTime  @default(now()) @map("created_at") @db.DateTime(3)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([tokenHash])
}
