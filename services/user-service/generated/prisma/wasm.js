/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, '__esModule', { value: true });

const {
  PrismaClientKnownRequestError,
  PrismaClientUnknownRequestError,
  PrismaClientRustPanicError,
  PrismaClientInitializationError,
  PrismaClientValidationError,
  getPrismaClient,
  sqltag,
  empty,
  join,
  raw,
  skip,
  Decimal,
  Debug,
  objectEnumValues,
  makeStrictEnum,
  Extensions,
  warnOnce,
  defineDmmfProperty,
  Public,
  getRuntime,
  createParam,
} = require('./runtime/wasm-engine-edge.js');

const Prisma = {};

exports.Prisma = Prisma;
exports.$Enums = {};

/**
 * Prisma Client JS version: 6.16.3
 * Query Engine version: bb420e667c1820a8c05a38023385f6cc7ef8e83a
 */
Prisma.prismaVersion = {
  client: '6.16.3',
  engine: 'bb420e667c1820a8c05a38023385f6cc7ef8e83a',
};

Prisma.PrismaClientKnownRequestError = PrismaClientKnownRequestError;
Prisma.PrismaClientUnknownRequestError = PrismaClientUnknownRequestError;
Prisma.PrismaClientRustPanicError = PrismaClientRustPanicError;
Prisma.PrismaClientInitializationError = PrismaClientInitializationError;
Prisma.PrismaClientValidationError = PrismaClientValidationError;
Prisma.Decimal = Decimal;

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = sqltag;
Prisma.empty = empty;
Prisma.join = join;
Prisma.raw = raw;
Prisma.validator = Public.validator;

/**
 * Extensions
 */
Prisma.getExtensionContext = Extensions.getExtensionContext;
Prisma.defineExtension = Extensions.defineExtension;

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull;
Prisma.JsonNull = objectEnumValues.instances.JsonNull;
Prisma.AnyNull = objectEnumValues.instances.AnyNull;

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull,
};

/**
 * Enums
 */
exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable',
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  passwordHash: 'passwordHash',
  passwordAlgo: 'passwordAlgo',
  firstName: 'firstName',
  lastName: 'lastName',
  role: 'role',
  tenantId: 'tenantId',
  totpSecret: 'totpSecret',
  totpEnabled: 'totpEnabled',
  emailVerified: 'emailVerified',
  invitedBy: 'invitedBy',
  status: 'status',
  lastLogin: 'lastLogin',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
};

exports.Prisma.InvitationScalarFieldEnum = {
  id: 'id',
  email: 'email',
  token: 'token',
  role: 'role',
  tenantId: 'tenantId',
  invitedBy: 'invitedBy',
  temporaryPasswordHash: 'temporaryPasswordHash',
  authType: 'authType',
  expiresAt: 'expiresAt',
  acceptedAt: 'acceptedAt',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
};

exports.Prisma.RefreshTokenScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  tokenHash: 'tokenHash',
  userAgent: 'userAgent',
  ip: 'ip',
  expiresAt: 'expiresAt',
  revokedAt: 'revokedAt',
  createdAt: 'createdAt',
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc',
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last',
};

exports.Prisma.UserOrderByRelevanceFieldEnum = {
  id: 'id',
  email: 'email',
  passwordHash: 'passwordHash',
  passwordAlgo: 'passwordAlgo',
  firstName: 'firstName',
  lastName: 'lastName',
  tenantId: 'tenantId',
  totpSecret: 'totpSecret',
  invitedBy: 'invitedBy',
};

exports.Prisma.InvitationOrderByRelevanceFieldEnum = {
  id: 'id',
  email: 'email',
  token: 'token',
  tenantId: 'tenantId',
  invitedBy: 'invitedBy',
  temporaryPasswordHash: 'temporaryPasswordHash',
  status: 'status',
};

exports.Prisma.RefreshTokenOrderByRelevanceFieldEnum = {
  id: 'id',
  userId: 'userId',
  tokenHash: 'tokenHash',
  userAgent: 'userAgent',
  ip: 'ip',
};
exports.Role = exports.$Enums.Role = {
  super_admin: 'super_admin',
  site_admin: 'site_admin',
  operator: 'operator',
  client_admin: 'client_admin',
  client_user: 'client_user',
};

exports.UserStatus = exports.$Enums.UserStatus = {
  active: 'active',
  invited: 'invited',
  disabled: 'disabled',
};

exports.AuthType = exports.$Enums.AuthType = {
  totp: 'totp',
  otp: 'otp',
};

exports.Prisma.ModelName = {
  User: 'User',
  Invitation: 'Invitation',
  RefreshToken: 'RefreshToken',
};
/**
 * Create the Client
 */
const config = {
  generator: {
    name: 'client',
    provider: {
      fromEnvVar: null,
      value: 'prisma-client-js',
    },
    output: {
      value:
        'C:\\Users\\Minfy\\Desktop\\realtime-audio-transcriber\\backend\\services\\user-service\\generated\\prisma',
      fromEnvVar: null,
    },
    config: {
      engineType: 'library',
    },
    binaryTargets: [
      {
        fromEnvVar: null,
        value: 'windows',
        native: true,
      },
    ],
    previewFeatures: [],
    sourceFilePath:
      'C:\\Users\\Minfy\\Desktop\\realtime-audio-transcriber\\backend\\services\\user-service\\prisma\\schema.prisma',
    isCustomOutput: true,
  },
  relativeEnvPaths: {
    rootEnvPath: null,
    schemaEnvPath: '../../.env',
  },
  relativePath: '../../prisma',
  clientVersion: '6.16.3',
  engineVersion: 'bb420e667c1820a8c05a38023385f6cc7ef8e83a',
  datasourceNames: ['db'],
  activeProvider: 'mysql',
  postinstall: false,
  inlineDatasources: {
    db: {
      url: {
        fromEnvVar: 'DATABASE_URL',
        value: null,
      },
    },
  },
  inlineSchema:
    '// This is your Prisma schema file,\n// learn more about it in the docs: https://pris.ly/d/prisma-schema\n\n// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?\n// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init\n\ngenerator client {\n  provider = "prisma-client-js"\n  output   = "../generated/prisma"\n}\n\ndatasource db {\n  provider = "mysql"\n  url      = env("DATABASE_URL")\n}\n\nenum Role {\n  super_admin\n  site_admin\n  operator\n  client_admin\n  client_user\n}\n\nenum UserStatus {\n  active\n  invited\n  disabled\n}\n\nenum AuthType {\n  totp\n  otp\n}\n\nmodel User {\n  id            String     @id @default(uuid()) @db.Char(36)\n  email         String     @unique @db.VarChar(191)\n  passwordHash  String     @map("password_hash") @db.VarChar(255)\n  passwordAlgo  String     @map("password_algo") @db.VarChar(32)\n  firstName     String?    @map("first_name") @db.VarChar(100)\n  lastName      String?    @map("last_name") @db.VarChar(100)\n  role          Role\n  tenantId      String?    @map("tenant_id") @db.VarChar(64)\n  totpSecret    String?    @map("totp_secret") @db.VarChar(191)\n  totpEnabled   Boolean    @default(false) @map("totp_enabled")\n  emailVerified Boolean    @default(false) @map("email_verified")\n  invitedBy     String?    @map("invited_by") @db.Char(36)\n  status        UserStatus @default(invited)\n  lastLogin     DateTime?  @map("last_login") @db.DateTime(3)\n  createdAt     DateTime   @default(now()) @map("created_at") @db.DateTime(3)\n  updatedAt     DateTime   @updatedAt @map("updated_at") @db.DateTime(3)\n\n  refreshTokens RefreshToken[]\n}\n\nmodel Invitation {\n  id                    String    @id @default(uuid()) @db.Char(36)\n  email                 String    @db.VarChar(191)\n  token                 String    @unique @db.Char(36)\n  role                  Role\n  tenantId              String?   @map("tenant_id") @db.VarChar(64)\n  invitedBy             String    @map("invited_by") @db.Char(36)\n  temporaryPasswordHash String?   @map("temporary_password_hash") @db.VarChar(255)\n  authType              AuthType  @map("auth_type")\n  expiresAt             DateTime  @map("expires_at") @db.DateTime(3)\n  acceptedAt            DateTime? @map("accepted_at") @db.DateTime(3)\n  status                String    @default("pending")\n  createdAt             DateTime  @default(now()) @map("created_at") @db.DateTime(3)\n  updatedAt             DateTime  @updatedAt @map("updated_at") @db.DateTime(3)\n}\n\nmodel RefreshToken {\n  id        String    @id @default(uuid()) @db.Char(36)\n  userId    String    @map("user_id") @db.Char(36)\n  tokenHash String    @map("token_hash") @db.VarChar(255)\n  userAgent String?   @map("user_agent") @db.VarChar(255)\n  ip        String?   @db.VarChar(64)\n  expiresAt DateTime  @map("expires_at") @db.DateTime(3)\n  revokedAt DateTime? @map("revoked_at") @db.DateTime(3)\n  createdAt DateTime  @default(now()) @map("created_at") @db.DateTime(3)\n\n  user User @relation(fields: [userId], references: [id], onDelete: Cascade)\n\n  @@index([userId])\n  @@index([tokenHash])\n}\n',
  inlineSchemaHash:
    '31607f94a9b65235ae06c738b644144e4795801717f7c9676036c21ca12bdccb',
  copyEngine: true,
};
config.dirname = '/';

config.runtimeDataModel = JSON.parse(
  '{"models":{"User":{"fields":[{"name":"id","kind":"scalar","type":"String"},{"name":"email","kind":"scalar","type":"String"},{"name":"passwordHash","kind":"scalar","type":"String","dbName":"password_hash"},{"name":"passwordAlgo","kind":"scalar","type":"String","dbName":"password_algo"},{"name":"firstName","kind":"scalar","type":"String","dbName":"first_name"},{"name":"lastName","kind":"scalar","type":"String","dbName":"last_name"},{"name":"role","kind":"enum","type":"Role"},{"name":"tenantId","kind":"scalar","type":"String","dbName":"tenant_id"},{"name":"totpSecret","kind":"scalar","type":"String","dbName":"totp_secret"},{"name":"totpEnabled","kind":"scalar","type":"Boolean","dbName":"totp_enabled"},{"name":"emailVerified","kind":"scalar","type":"Boolean","dbName":"email_verified"},{"name":"invitedBy","kind":"scalar","type":"String","dbName":"invited_by"},{"name":"status","kind":"enum","type":"UserStatus"},{"name":"lastLogin","kind":"scalar","type":"DateTime","dbName":"last_login"},{"name":"createdAt","kind":"scalar","type":"DateTime","dbName":"created_at"},{"name":"updatedAt","kind":"scalar","type":"DateTime","dbName":"updated_at"},{"name":"refreshTokens","kind":"object","type":"RefreshToken","relationName":"RefreshTokenToUser"}],"dbName":null},"Invitation":{"fields":[{"name":"id","kind":"scalar","type":"String"},{"name":"email","kind":"scalar","type":"String"},{"name":"token","kind":"scalar","type":"String"},{"name":"role","kind":"enum","type":"Role"},{"name":"tenantId","kind":"scalar","type":"String","dbName":"tenant_id"},{"name":"invitedBy","kind":"scalar","type":"String","dbName":"invited_by"},{"name":"temporaryPasswordHash","kind":"scalar","type":"String","dbName":"temporary_password_hash"},{"name":"authType","kind":"enum","type":"AuthType","dbName":"auth_type"},{"name":"expiresAt","kind":"scalar","type":"DateTime","dbName":"expires_at"},{"name":"acceptedAt","kind":"scalar","type":"DateTime","dbName":"accepted_at"},{"name":"status","kind":"scalar","type":"String"},{"name":"createdAt","kind":"scalar","type":"DateTime","dbName":"created_at"},{"name":"updatedAt","kind":"scalar","type":"DateTime","dbName":"updated_at"}],"dbName":null},"RefreshToken":{"fields":[{"name":"id","kind":"scalar","type":"String"},{"name":"userId","kind":"scalar","type":"String","dbName":"user_id"},{"name":"tokenHash","kind":"scalar","type":"String","dbName":"token_hash"},{"name":"userAgent","kind":"scalar","type":"String","dbName":"user_agent"},{"name":"ip","kind":"scalar","type":"String"},{"name":"expiresAt","kind":"scalar","type":"DateTime","dbName":"expires_at"},{"name":"revokedAt","kind":"scalar","type":"DateTime","dbName":"revoked_at"},{"name":"createdAt","kind":"scalar","type":"DateTime","dbName":"created_at"},{"name":"user","kind":"object","type":"User","relationName":"RefreshTokenToUser"}],"dbName":null}},"enums":{},"types":{}}'
);
defineDmmfProperty(exports.Prisma, config.runtimeDataModel);
config.engineWasm = {
  getRuntime: async () => require('./query_engine_bg.js'),
  getQueryEngineWasmModule: async () => {
    const loader = (await import('#wasm-engine-loader')).default;
    const engine = (await loader).default;
    return engine;
  },
};
config.compilerWasm = undefined;

config.injectableEdgeEnv = () => ({
  parsed: {
    DATABASE_URL:
      (typeof globalThis !== 'undefined' && globalThis['DATABASE_URL']) ||
      (typeof process !== 'undefined' &&
        process.env &&
        process.env.DATABASE_URL) ||
      undefined,
  },
});

if (
  (typeof globalThis !== 'undefined' && globalThis['DEBUG']) ||
  (typeof process !== 'undefined' && process.env && process.env.DEBUG) ||
  undefined
) {
  Debug.enable(
    (typeof globalThis !== 'undefined' && globalThis['DEBUG']) ||
      (typeof process !== 'undefined' && process.env && process.env.DEBUG) ||
      undefined,
  );
}

const PrismaClient = getPrismaClient(config);
exports.PrismaClient = PrismaClient;
Object.assign(exports, Prisma);
